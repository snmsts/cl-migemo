(uiop/package:define-package :cl-migemo/cffi (:use :cl))
(in-package :cl-migemo/cffi)
;;;don't edit above
(defmacro define-constant (name value &optional doc)
  `(defconstant ,name (if (boundp ',name) (symbol-value ',name) ,value)
     ,@(when doc (list doc))))
;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(define-constant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(define-constant #.(swig-lispify "MIGEMO_VERSION" 'constant) "1.3")

(cl:export '#.(swig-lispify "MIGEMO_VERSION" 'constant))

(define-constant #.(swig-lispify "MIGEMO_DICTID_INVALID" 'constant) 0)

(cl:export '#.(swig-lispify "MIGEMO_DICTID_INVALID" 'constant))

(define-constant #.(swig-lispify "MIGEMO_DICTID_MIGEMO" 'constant) 1)

(cl:export '#.(swig-lispify "MIGEMO_DICTID_MIGEMO" 'constant))

(define-constant #.(swig-lispify "MIGEMO_DICTID_ROMA2HIRA" 'constant) 2)

(cl:export '#.(swig-lispify "MIGEMO_DICTID_ROMA2HIRA" 'constant))

(define-constant #.(swig-lispify "MIGEMO_DICTID_HIRA2KATA" 'constant) 3)

(cl:export '#.(swig-lispify "MIGEMO_DICTID_HIRA2KATA" 'constant))

(define-constant #.(swig-lispify "MIGEMO_DICTID_HAN2ZEN" 'constant) 4)

(cl:export '#.(swig-lispify "MIGEMO_DICTID_HAN2ZEN" 'constant))

(define-constant #.(swig-lispify "MIGEMO_DICTID_ZEN2HAN" 'constant) 5)

(cl:export '#.(swig-lispify "MIGEMO_DICTID_ZEN2HAN" 'constant))

(define-constant #.(swig-lispify "MIGEMO_OPINDEX_OR" 'constant) 0)

(cl:export '#.(swig-lispify "MIGEMO_OPINDEX_OR" 'constant))

(define-constant #.(swig-lispify "MIGEMO_OPINDEX_NEST_IN" 'constant) 1)

(cl:export '#.(swig-lispify "MIGEMO_OPINDEX_NEST_IN" 'constant))

(define-constant #.(swig-lispify "MIGEMO_OPINDEX_NEST_OUT" 'constant) 2)

(cl:export '#.(swig-lispify "MIGEMO_OPINDEX_NEST_OUT" 'constant))

(define-constant #.(swig-lispify "MIGEMO_OPINDEX_SELECT_IN" 'constant) 3)

(cl:export '#.(swig-lispify "MIGEMO_OPINDEX_SELECT_IN" 'constant))

(define-constant #.(swig-lispify "MIGEMO_OPINDEX_SELECT_OUT" 'constant) 4)

(cl:export '#.(swig-lispify "MIGEMO_OPINDEX_SELECT_OUT" 'constant))

(define-constant #.(swig-lispify "MIGEMO_OPINDEX_NEWLINE" 'constant) 5)

(cl:export '#.(swig-lispify "MIGEMO_OPINDEX_NEWLINE" 'constant))

(cffi:defcfun ("migemo_open" #.(swig-lispify "migemo_open" 'function)) :pointer
  (dict :string))

(cl:export '#.(swig-lispify "migemo_open" 'function))

(cffi:defcfun ("migemo_close" #.(swig-lispify "migemo_close" 'function)) :void
  (object :pointer))

(cl:export '#.(swig-lispify "migemo_close" 'function))

(cffi:defcfun ("migemo_query" #.(swig-lispify "migemo_query" 'function)) :pointer
  (object :pointer)
  (query :pointer))

(cl:export '#.(swig-lispify "migemo_query" 'function))

(cffi:defcfun ("migemo_release" #.(swig-lispify "migemo_release" 'function)) :void
  (object :pointer)
  (string :pointer))

(cl:export '#.(swig-lispify "migemo_release" 'function))

(cffi:defcfun ("migemo_set_operator" #.(swig-lispify "migemo_set_operator" 'function)) :int
  (object :pointer)
  (index :int)
  (op :pointer))

(cl:export '#.(swig-lispify "migemo_set_operator" 'function))

(cffi:defcfun ("migemo_get_operator" #.(swig-lispify "migemo_get_operator" 'function)) :pointer
  (object :pointer)
  (index :int))

(cl:export '#.(swig-lispify "migemo_get_operator" 'function))

(cffi:defcfun ("migemo_setproc_char2int" #.(swig-lispify "migemo_setproc_char2int" 'function)) :void
  (object :pointer)
  (proc :pointer))

(cl:export '#.(swig-lispify "migemo_setproc_char2int" 'function))

(cffi:defcfun ("migemo_setproc_int2char" #.(swig-lispify "migemo_setproc_int2char" 'function)) :void
  (object :pointer)
  (proc :pointer))

(cl:export '#.(swig-lispify "migemo_setproc_int2char" 'function))

(cffi:defcfun ("migemo_load" #.(swig-lispify "migemo_load" 'function)) :int
  (obj :pointer)
  (dict_id :int)
  (dict_file :string))

(cl:export '#.(swig-lispify "migemo_load" 'function))

(cffi:defcfun ("migemo_is_enable" #.(swig-lispify "migemo_is_enable" 'function)) :int
  (obj :pointer))

(cl:export '#.(swig-lispify "migemo_is_enable" 'function))


